# Copyright 2020 The Dawn Authors
# Copyright 2021 The WebNN-native Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../../scripts/dawn_overrides_with_defaults.gni")

import("//build_overrides/build.gni")
import("${dawn_root}/scripts/dawn_component.gni")
import("${dawn_root}/scripts/dawn_features.gni")
import("${dawn_root}/src/webnn/webnn_generator.gni")

# Import mac_min_system_version
if (is_mac) {
  if (dawn_has_build) {
    import("//build/config/mac/mac_sdk.gni")
  } else {
    mac_min_system_version = "10.11.0"
  }
}

group("dawn_abseil") {
  # When build_with_chromium=true we need to include "//third_party/abseil-cpp:absl" while
  # it's beneficial to be more specific with standalone Dawn, especially when it comes to
  # including it as a dependency in other projects (such as Skia).
  if (build_with_chromium) {
    public_deps = [ "$dawn_abseil_dir:absl" ]
  } else {
    public_deps = [ "${dawn_root}/third_party/gn/abseil-cpp:str_format" ]
  }
}

config("webnn_native_internal") {
  configs = [ "${dawn_root}/src/common:dawn_internal" ]

  # Suppress warnings that Metal isn't in the deployment target of Chrome:
  # initialization of the Metal backend is behind a IsMetalSupported check so
  # Dawn won't call Metal functions on macOS 10.10.
  # At the time this is written Chromium supports 10.10.0 and above, so if we
  # aren't on 10.11 it means we are on 10.11 and above, and Metal is available.
  # Skipping this check on 10.11 and above is important as it allows getting
  # proper compilation warning when using 10.12 and above feature for example.
  # TODO(cwallez@chromium.org): Consider using API_AVAILABLE annotations on all
  # metal code in dawn once crbug.com/1004024 is sorted out if Chromium still
  # supports 10.10 then.
  if (is_mac && mac_min_system_version == "10.10.0") {
    cflags_objcc = [ "-Wno-unguarded-availability" ]
  }
}

webnn_json_generator("webnn_native_utils_gen") {
  target = "dawn_native_utils"
  outputs = [
    "src/webnn/webnn_native/ProcTable.cpp",
    "src/webnn/webnn_native/ml_structs_autogen.h",
    "src/webnn/webnn_native/ml_structs_autogen.cpp",
    "src/webnn/webnn_native/ValidationUtils_autogen.h",
    "src/webnn/webnn_native/ValidationUtils_autogen.cpp",
    "src/webnn/webnn_native/webnn_platform_autogen.h",
    "src/webnn/webnn_native/ChainUtils_autogen.h",
    "src/webnn/webnn_native/ChainUtils_autogen.cpp",
    "src/webnn/webnn_native/webnn_absl_format_autogen.h",
    "src/webnn/webnn_native/webnn_absl_format_autogen.cpp",
  ]
}

# Public webnn_native headers so they can be publicly visible for
# dependencies of webnn_native
source_set("webnn_native_headers") {
  public_deps = [ "${dawn_root}/src/webnn:webnncpp_headers" ]
  all_dependent_configs = [ "${dawn_root}/src/common:dawn_public_include_dirs" ]
  sources = [
    "${dawn_root}/src/include/dawn_native/WebnnNative.h",
    "${dawn_root}/src/include/dawn_native/webnn_native_export.h",
  ]
}

# The meat of the compilation for webnn_native so that we can cheaply have
# shared_library / static_library versions of it. It compiles all the files
# except those that define exported symbols.
source_set("webnn_native_sources") {
  deps = [
    ":webnn_native_headers",
    ":webnn_native_utils_gen",
    "${dawn_root}/src/common",
  ]
  defines = []
  libs = []
  data_deps = []
  include_dirs = []
  lib_dirs = []
  libs = []

  configs += [ ":webnn_native_internal" ]

  public_deps = [
    ":dawn_abseil",
    "${dawn_root}/src/dawn_platform",
  ]

  sources = get_target_outputs(":webnn_native_utils_gen")

  sources += [
    "Context.cpp",
    "Context.h",
    "Error.cpp",
    "Error.h",
    "ErrorData.cpp",
    "ErrorData.h",
    "ErrorScope.cpp",
    "ErrorScope.h",
    "Graph.cpp",
    "Graph.h",
    "GraphBuilder.cpp",
    "GraphBuilder.h",
    "NamedInputs.h",
    "NamedOutputs.h",
    "NamedRecords.h",
    "ObjectBase.cpp",
    "ObjectBase.h",
    "Operand.cpp",
    "Operand.h",
    "Operator.cpp",
    "Operator.h",
  ]

  sources += [
    "ops/BatchNorm.cpp",
    "ops/BatchNorm.h",
    "ops/Binary.cpp",
    "ops/Binary.h",
    "ops/Clamp.h",
    "ops/Concat.cpp",
    "ops/Concat.h",
    "ops/Constant.h",
    "ops/Conv2d.cpp",
    "ops/Conv2d.h",
    "ops/Gemm.cpp",
    "ops/Gemm.h",
    "ops/Gru.cpp",
    "ops/Gru.h",
    "ops/Input.h",
    "ops/InstanceNorm.cpp",
    "ops/InstanceNorm.h",
    "ops/LeakyRelu.h",
    "ops/Pad.cpp",
    "ops/Pad.h",
    "ops/Pool2d.cpp",
    "ops/Pool2d.h",
    "ops/Reduce.cpp",
    "ops/Reduce.h",
    "ops/Resample.cpp",
    "ops/Resample.h",
    "ops/Reshape.cpp",
    "ops/Reshape.h",
    "ops/Transpose.cpp",
    "ops/Transpose.h",
    "ops/Unary.cpp",
    "ops/Unary.h",
  ]

  if (dawn_enable_null) {
    sources += [
      "null/ContextNull.cpp",
      "null/ContextNull.h",
    ]
  }
}

# The static and shared libraries for webnn_native. Most of the files are
# already compiled in webnn_native_sources, but we still need to compile
# files defining exported symbols.
dawn_component("webnn_native") {
  DEFINE_PREFIX = "WEBNN_NATIVE"

  #Make headers publically visible
  public_deps = [ ":webnn_native_headers" ]

  deps = [
    ":webnn_native_sources",
    "${dawn_root}/src/common",
  ]
  sources = [ "WebnnNative.cpp" ]
  configs = [ ":webnn_native_internal" ]
  defines = [
    "WEBNN_NATIVE_SHARED_LIBRARY",
    "WEBNN_NATIVE_IMPLEMENTATION",
  ]
}
