# Copyright 2012 The Dawn Authors
# Copyright 2021 The WebNN-native Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../../scripts/dawn_overrides_with_defaults.gni")

import("//testing/test.gni")
import("${dawn_root}/src/webnn/webnn_generator.gni")

group("webnn_tests") {
  testonly = true
  deps = [ ":webnn_unittests" ]
}

###############################################################################
# Gtest Gmock - Handle building inside and outside of Chromium.
###############################################################################

# When building outside of Chromium we need to define our own targets for GTest
# and GMock. However when compiling inside of Chromium we need to reuse the
# existing targets, both because Chromium has a special harness for swarming
# and because otherwise the "gn check" fails.

if (!build_with_chromium) {
  # When we aren't in Chromium we define out own targets based on the location
  # of the googletest repo.
  googletest_dir = dawn_googletest_dir

  config("gtest_config") {
    include_dirs = [
      "${googletest_dir}/googletest",
      "${googletest_dir}/googletest/include",
    ]
  }

  static_library("gtest") {
    testonly = true
    sources = [ "${googletest_dir}/googletest/src/gtest-all.cc" ]
    public_configs = [ ":gtest_config" ]
  }

  config("gmock_config") {
    include_dirs = [
      "${googletest_dir}/googlemock",
      "${googletest_dir}/googlemock/include",
      "${googletest_dir}/googletest/include",
    ]
  }

  static_library("gmock") {
    testonly = true
    sources = [ "${googletest_dir}/googlemock/src/gmock-all.cc" ]
    public_configs = [ ":gmock_config" ]
  }

  group("gmock_and_gtest") {
    testonly = true
    public_deps = [
      ":gmock",
      ":gtest",
    ]
  }
} else {
  # When we are in Chromium we reuse its targets, and also add some deps that
  # are needed to launch the test in swarming mode.
  group("gmock_and_gtest") {
    testonly = true
    public_deps = [
      "//base",
      "//base/test:test_support",
      "//testing/gmock",
      "//testing/gtest",
    ]
  }
}

###############################################################################
# WebNN unittests
###############################################################################

webnn_json_generator("mock_webnn_gen") {
  target = "mock_api"
  outputs = [
    "src/dawn/mock_webnn.h",
    "src/dawn/mock_webnn.cpp",
  ]
}

test("webnn_unittests") {
  configs += [ "${dawn_root}/src/common:dawn_internal" ]
  if (is_linux) {
    configs += [ "//build/config//gcc:rpath_for_built_shared_libraries" ]
  }

  deps = [
    ":gmock_and_gtest",
    ":mock_webnn_gen",
    "${dawn_root}/src/common",
    "${dawn_root}/src/webnn:webnn_proc",
    "${dawn_root}/src/webnn:webnncpp",
    "${dawn_root}/src/webnn/webnn_native:webnn_native",
    "${dawn_root}/src/webnn/webnn_native:webnn_native_sources",
  ]

  # Add internal webnn_native config for internal unittests.
  configs += [ "${dawn_root}/src/webnn/webnn_native:webnn_native_internal" ]

  sources = get_target_outputs(":mock_webnn_gen")
  sources += [
    #"//third_party/dawn/src/tests/unittests/ResultTests.cpp",
    "unittests/ErrorTests.cpp",
    "unittests/ObjectBaseTests.cpp",
    "unittests/validation/GraphValidationTests.cpp",
    "unittests/validation/ValidationTest.cpp",
    "unittests/validation/ValidationTest.h",
  ]

  # When building inside Chromium, use their gtest main function because it is
  # needed to run in swarming correctly.
  if (build_with_chromium) {
    deps += [ ":webnn_unittests_main" ]
  } else {
    sources += [ "UnittestsMain.cpp" ]
  }
}
